{
  "language": "Solidity",
  "sources": {
    "contracts/Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror Wallet__NotOwner();\r\n\r\ncontract Wallet {\r\n    // Type Declarations\r\n    using PriceConverter for uint256;\r\n\r\n    address private immutable owner;\r\n    uint256 private balance = 0;\r\n    uint256 private constant MIN_USD = 50 * 10**9;\r\n    mapping(address => uint256) private sendersAddress;\r\n    AggregatorV3Interface private priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert Wallet__NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getPriceInUSD(priceFeed) >= MIN_USD,\r\n            \"You need to spend more ETH!\"\r\n        );\r\n        sendersAddress[msg.sender] += msg.value;\r\n        balance += msg.value;\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public onlyOwner {\r\n        if (_amount > balance) {\r\n            revert(\"Balance is low !!\");\r\n        } else {\r\n            (bool sent, ) = owner.call{value: _amount}(\"\");\r\n            require(sent, \"Transaction Failed!!\");\r\n            balance -= _amount;\r\n        }\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return priceFeed;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return balance;\r\n    }\r\n\r\n    function getAmountByAddress(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return sendersAddress[_address];\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer / 100000000);\r\n    }\r\n\r\n    function getPriceInUSD(uint256 ethAmt, AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethInUSD = (ethPrice * ethAmt) / 1000000000;\r\n\r\n        return ethInUSD;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}